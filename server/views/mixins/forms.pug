- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - textareaId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= textareaId)= propertyName
    textarea(
      id= textareaId
      name=getInputName(propertyName)
      class=classLine
      data-dl-input-translation='true'
      rows='3'
    )&attributes(attributes)=_.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, errors = {}, items, multiple = false, selectedIds = [] )
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - selectId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= selectId)= propertyName
    select(
      id= selectId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      if (!multiple)
        option(value="") 
      each item in items
        option(
          value=item.id
          selected= (selectedIds.includes(item.id))
        )= (item.name || item.fullName()) 
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(localName, propertyName, items)
  - selectId = getInputId(propertyName)
  .col-12.col-md
    .input-group.mb-3
      label.input-group-text(for=selectId)= t(`views.filters.${localName}`)
      select.form-select(id= inputId, name=propertyName)
        option
        each item in items
          option(value=item.id)= item.name

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)
  

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
